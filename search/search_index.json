{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Pygmy","text":""},{"location":"#welcome-to-pygmystack","title":"Welcome to pygmystack","text":"<p>The pygmy stack is a container stack for local development.</p> <p>It is a collaboration between:</p> <ul> <li>amazee.io - Initial development of pygmy, and it's predecessor, cachalot</li> <li>@fubarhouse - complete rewrite of pygmy in Golang (Thanks Karl!)</li> <li>the Lagoon team - ongoing support and maintenance</li> </ul> <p>Please see github.com/pygmystack for more information</p> <p>Why use <code>pygmy</code>?</p> <ul> <li>Starting the necessary Docker Containers for your Docker Development Environment The pygmy stack is a container stack for local development, and <code>pygmy</code> is the main tool.</li> </ul> <p>It's built to work with:</p> <ul> <li>Docker Desktop for Mac</li> <li>Docker Desktop for Windows</li> <li>Docker Engine for Linux</li> </ul> <p>Quite a lot for such a small whale \ud83d\udc33)</p> <p>What <code>pygmy</code> will handle for you:</p> <ul> <li>Starting the necessary Docker Containers for local development</li> <li>If on Linux: Adds <code>nameserver 127.0.0.1</code> to your <code>/etc/resolv.conf</code> file, so that your local Linux can resolve <code>*.docker.amazee.io</code> via the dnsmasq container</li> <li>If on Mac with Docker for Mac: Creates the file <code>/etc/resolver/docker.amazee.io</code> which tells OS X to forward DNS requests for <code>*.docker.amazee.io</code> to the dnsmasq container</li> <li>Tries to add the ssh key in <code>~/.ssh/id_rsa</code> to the ssh-agent container (no worries if that is the wrong key, you can add more any time)</li> <li>Starts a local mail Mail Transfer Agent (MTA) in order to test and view mails</li> </ul>"},{"location":"connect_to_mysql_from_external/","title":"Connecting to MySQL externally","text":"<p>Warning</p> <p>This section is outdated and needs an update</p>"},{"location":"connect_to_mysql_from_external/#connect-to-mysql-in-docker-container","title":"Connect to MySQL in Docker Container","text":"<p>If you like to connect to the MySQL Database inside the Docker container with an external Tool like Sequel Pro, MySQL Workbench, HeidiSQL, DBeaver, just plain old <code>mysql</code> cli or anything else.</p>"},{"location":"connect_to_mysql_from_external/#get-published-mysql-port-from-container","title":"Get published mysql port from container","text":"<p>Docker assigns a randomly published port for MySQL during each container start. This is done to prevent port collisions.</p> <p>To get the published port via <code>docker</code>:</p> <pre><code>    $ docker port changeme.net.docker.amazee.io\n    3306/tcp -&gt; 0.0.0.0:32797\n</code></pre> <p>Or via <code>docker-compose</code> inside a Drupal repository</p> <pre><code>    $ docker-compose port drupal 3306\n    0.0.0.0:32797\n</code></pre>"},{"location":"connect_to_mysql_from_external/#linux-get-ip-from-container","title":"<code>linux</code> Get ip from container","text":"<p>If you are on Linux and run docker native, you also need to get the IP of the container</p> <pre><code>    $ docker inspect --format '{{ .NetworkSettings.IPAddress }}' changeme.net.docker.amazee.io\n    172.17.0.4\n</code></pre>"},{"location":"connect_to_mysql_from_external/#connect-to-mysql","title":"Connect to MySQL","text":"Linux OS X IP/Host IP from container <code>docker.amazee.io</code> Port published port from container published port from container Username <code>drupal</code> <code>drupal</code> Password <code>drupal</code> <code>drupal</code> Database <code>drupal</code> <code>drupal</code>"},{"location":"connect_to_mysql_from_external/#example-sequel-pro","title":"Example Sequel PRO","text":""},{"location":"drupal_site_containers/","title":"Drupal Site Containers","text":"<p>Warning</p> <p>This section is outdated and needs an update</p>"},{"location":"drupal_site_containers/#drupal-docker-containers","title":"Drupal Docker Containers","text":"<p>During Part I we just started the shared Docker containers. For each Drupal Site we need an own Docker Container:</p>"},{"location":"drupal_site_containers/#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker Compose</li> <li>On OS X just run <code>brew install docker-compose</code></li> <li>On Linux use your favorite package manager or https://docs.docker.com/compose/install/</li> </ul>"},{"location":"drupal_site_containers/#find-the-right-docker-composeyml","title":"Find the right <code>docker-compose.yml</code>","text":"<ol> <li>Visit https://github.com/uselagoon/lagoon-examples or clone https://github.com/lagoon-examples/drupal-base.git into a folder on your computer</li> <li>Copy the desired example file into your Drupal directory (see descriptions below). Use <code>example-docker-compose-drupal.yml</code> if unsure.</li> <li>Rename the file to <code>docker-compose.yml</code></li> <li>Edit the file according to your needs, change at least the host name. BTW: It's perfectly fine to commit this file into your git repository, so others that are also using docker can use it as well.</li> <li>Run in the same directory as the <code>docker-compose.yml</code>:<pre><code>docker-compose up -d\n</code></pre> <ol> <li>If you are on Windows add the URL to the Hosts file (see windows documentation for that).</li> <li>Open your browser with the entered URL in the <code>docker-compose.yml</code>, happy Drupaling!</li> </ol> </li> </ol>"},{"location":"drupal_site_containers/#connect-to-the-container","title":"Connect to the container","text":"<p>To run commands like <code>git</code> or other things within the container, you need to connect to the container.</p> <p>There are two ways for that:</p>"},{"location":"drupal_site_containers/#connect-via-docker-compose-easier","title":"Connect via <code>docker-compose</code> (easier)","text":"<p>This is the easier way, you need to be in the same folder where also the <code>docker-compose.yml</code> for that to work:</p> <pre><code>docker-compose exec --user drupal drupal bash\n</code></pre>"},{"location":"drupal_site_containers/#connect-via-docker","title":"Connect via <code>docker</code>","text":"<p>If you want to connect to a container wherever you are right now with your bash:</p> <pre><code>docker exec -itu drupal example.com.docker.amazee.io bash\n</code></pre> <p>Replace <code>example.com.docker.amazee.io</code> with the docker container you want to connect to</p>"},{"location":"drupal_site_containers/#drush-from-your-host-machine","title":"Drush from your host machine","text":"<p>To use Drush, you can either connect to the container as above, or add a bash function that will connect for you to run your Drush command. To add the function, add this to your .bashrc file:</p> <p>Bash: <pre><code>function ddrush() {\n  args=\"\"\n  while [ \"$1\" != \"\" ]; do\n    args=\"${args} '$1'\" &amp;&amp; shift\n  done;\n\n  docker-compose exec --user drupal drupal bash -c \"source ~/.bash_envvars &amp;&amp; cd \\\"$AMAZEEIO_WEBROOT\\\" &amp;&amp; PATH=`pwd`/../vendor/bin:\\$PATH &amp;&amp; drush ${args}\"\n}\n</code></pre></p> <p>Fish Shell - (fishshell.com): <pre><code>function ddrush --description 'Drush fish (friendly interactive shell) function that detects Amazee.io Docker container. '\n  if test -f (git rev-parse --show-toplevel)/.amazeeio.yml\n    echo \"Using Amazee.io Docker Container Drush\"\n    command docker-compose exec --user drupal drupal bash -c \"source ~/.bash_envvars &amp;&amp; cd \\\"$AMAZEEIO_WEBROOT\\\" &amp;&amp; PATH=`pwd`/../vendor/bin:\\$PATH &amp;&amp; drush $argv\"\n  else\n    command drush $argv\n  end\nend\n\nfuncsave drush\n</code></pre></p> <p>When you next start a bash session, you'll be able to use <code>ddrush</code> just like your normal <code>drush</code> command.</p>"},{"location":"drupal_site_containers/#update-images","title":"Update Images","text":"<p>We constantly make improvements, updates and some other nice things to our container images. Visit the Lagoon Image releases page to see if there is something new. If you need to update the Docker Images to the newest version from the Docker Hub run in the same folder as the <code>docker-compose.yml</code>:</p> <pre><code>docker-compose pull\ndocker-compose up -d\n</code></pre>"},{"location":"drupal_site_containers/#slow-updates","title":"Slow Updates?","text":"<p>When pulling a new docker image, the download can get stuck. There is a nice workaround for that: pull a second time :)</p> <p>Just open another terminal window at the exact same directory than you run the first <code>docker-compose pull</code> and just run that command again. The download will be unstuck and continue again. If the download is stuck again, cancel the second command with CTRL+c, and run it again (no worries, the first one will continue to run). Repeat that until the download is completely done.</p>"},{"location":"drupal_site_containers/#docker-composeyml-example-files","title":"<code>docker-compose.yml</code> example files","text":"<p>Visit https://github.com/uselagoon/lagoon-examples to see a range of example projects that you can clone as a starting point</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#installation-of-pygmy","title":"Installation of Pygmy","text":""},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<p>Make sure you have the following dependencies installed:</p> <ul> <li>Docker, see the official guides on how to install docker on your system.</li> <li>Go (optional), see the official guides</li> </ul>"},{"location":"installation/#installation","title":"Installation","text":""},{"location":"installation/#installing-from-homebrew-recommended-for-most-users","title":"Installing from homebrew (recommended for most users)","text":"<p>Works for: Linux &amp; MacOS</p> <pre><code>brew tap pygmystack/pygmy;\nbrew install pygmy;\n</code></pre>"},{"location":"installation/#installing-from-a-precompiled-binary","title":"Installing from a precompiled binary","text":"<p>Releases on GitHub accompany binaries available for download.</p> <p>To install it, put the binary into your system's <code>$PATH</code> environment variable and make it executable.</p> <p>The following is an example of how you would do this, note the URL and location may change depending on your needs. <pre><code>$ wget https://github.com/pygmystack/pygmy/releases/download/v0.8.0/pygmy-darwin\n$ mv ./pygmy-darwin /usr/local/bin/pygmy\n$ chmod u+x /usr/local/bin/pygmy\n</code></pre></p>"},{"location":"installation/#build-from-source","title":"Build from source","text":"<p>Pygmy comes with a Make file, which you can simply run <code>make build &amp;&amp; make clean</code> to build binaries for Linux (amd64), Windows (x86) &amp; MacOS (Darwin).</p> <p>From here you can follow the guidance to install the relevant executable in the <code>builds/</code> folder usign the instructions above.</p>"},{"location":"installation/#installing-from-source","title":"Installing from source","text":"<p>The installation of <code>pygmy</code> is fairly simple and can be accomplished via the go toolchain</p> <pre><code>$ go get github.com/pygmystack/pygmy\n</code></pre>"},{"location":"local_docker_development/","title":"Local Docker Development","text":"<p>Warning</p> <p>This section is outdated and needs an update</p>"},{"location":"local_docker_development/#local-drupal-docker-development","title":"Local Drupal Docker Development","text":"<p>Lagoon supports development workflows which involve local development sites. We provide a Drupal Docker development environment that runs on your local computer. It uses the exact same configuration for all services like on the Lagoon servers. This means:</p> <ul> <li>If the site runs locally, it also runs on production</li> <li>You can use the exact same <code>settings.php</code> file for local and production</li> </ul> <p>And the best: You don't need to have a Lagoon account or site running in order to use the local development environment! Just install it, and experience all the benefits of Lagoon for free.</p> <p>The Docker based Drupal Development environment consists of two parts:</p>"},{"location":"local_docker_development/#part-i-shared-docker-containers","title":"Part I: Shared Docker Containers","text":"<p>The shared docker containers for HAProxy and the SSH Agent, these are used by all other containers in order to properly work. They are started with <code>pygmy</code> for Linux &amp; OS X.</p>"},{"location":"local_docker_development/#part-ii-drupal-docker-containers","title":"Part II: Drupal Docker Containers","text":"<p>The Docker Containers which will run Drupal. These are made to be copied into a Drupal root directory and to be started from there with <code>docker-compose</code>. Read how they are used</p>"},{"location":"local_docker_development/#what-it-includes","title":"What it includes","text":"<p>An example local Docker Drupal Development environment, such as https://www.github.com/lagoon-examples/drupal-solr, equips you with all the tools you need to develop your Drupal site locally:</p> <ul> <li>Webserver: Nginx</li> <li>Frontend Caching: Varnish</li> <li>FastCGI Process Manager: PHP-FPM</li> <li>Server-side Scripting Language: PHP</li> <li>Database: MariaDB</li> <li>Search: Apache Solr</li> <li>Dependency Manager for PHP: Composer</li> <li>NodeJS / NPM</li> </ul> <p>For more information about software components used in the Lagoon Stack head over to their docs.</p>"},{"location":"local_docker_development/#how-this-works","title":"How this works","text":"<p>Docker is super awesome and the perfect tool for local development. There are some hurdles though (no worries, we have a solution for all of them):</p>"},{"location":"local_docker_development/#exposed-ports","title":"Exposed ports","text":"<p>If multiple Docker containers are exposing the same port it assigned a random port to the exposed port. In our case, this would mean, that each Drupal Container which would like to listen on Port 80 would get a random port like 34564 assigned. As they are random assigned it would be a lot of hassle of figuring out which port that the Drupal is found, additionally, Drupal doesn't like to run on another Port then 80 or 443 so much.</p>"},{"location":"local_docker_development/#ssh-keys","title":"SSH Keys","text":"<p>It is possible to add mount ssh private keys into Docker containers, but this is again cumbersome, especially when you have a passphrase protected key (as you should!). You would need to enter the passphrase for each container that you start. Not a lot of fun.</p>"},{"location":"local_docker_development/#the-solution","title":"The Solution","text":"<p><code>pygmy</code> allows you to:</p> <ul> <li>Access all sites via the Port 80 or 443 with just different URLs like site1.docker.amazee.io and site2.docker.amazee.io</li> <li>Add your SSH Key once to the system and can forget about it, no need to add it to each container</li> </ul> <p>The environment starts 4 containers:</p> <ul> <li>andyshinn/dnsmasq Docker container which will listen on port 53 and resolve all DNS requests from <code>*.docker.amazee.io</code> to <code>127.0.0.1</code> (so basically a better way then filling your <code>/etc/hosts</code> file by hand)</li> <li>amazeeio/haproxy Docker container which will listen on port 80 and 443. It additionally listens to the Docker socket, realize when you start a new Drupal Container and adapt fully automatically it's haproxy configuration (thanks to the awesome tool docker-gen). It forwards HTTP and HTTPs requests to the correct Drupal Container. With that we can access all Drupal Containers via a single Port.</li> <li>amazeeio/ssh-agent Docker container which will keeps an ssh-agent at hand for the other Drupal Containers. With that the Drupal Containers do not need to handle ssh-agenting themselves</li> <li>mailhog/mailhog Docker container which will keeps emails from being sent but allows for you to read and debug message contents.</li> </ul>"},{"location":"local_docker_development/#schema-for-linux-native-docker","title":"Schema for Linux (native Docker)","text":"<pre><code>                                            +--------------------------------------------------------------------+\n                                            |Docker                                                              |\n                                            |                                                                    |\n                                            |          HAProxy knows which                                       |\n                                            |          *.docker.amazee.io is                                     |\n                                            |          handled by which container  +---------------------+       |\n                                            |                                      |                     |       |\n                                            |                              +-------+ Drupal Container 1  &lt;--+    |\n                                            |                              |       |                     |  |    |\n+--------------------+                      |     +------------------+     |       +---------------------+  |    |\n|                    |                      |     |                  |     |                                |    |\n|                    |                      |     |     HAProxy      +-----+                                |    |\n|                    +----------------------------&gt;                  |     |       +---------------------+  |    |\n|                    |                      |     | Published Ports  |     |       |                     |  |    |\n|                    |  any HTTP/HTTPS      |     | 80/443           |     +-------+ Drupal Container 2  &lt;--+    |\n|                    |  request             |     +------------------+             |                     |  |    |\n|      Browser       |                      |                                      +---------------------+  |    |\n|                    |                      |                                                               |    |\n|                    |                      |     +------------------+                                      |    |\n|                    +----------------------------&gt;                  |                                      |    |\n|                    &lt;----------------------------+   dns masq       |                                      |    |\n|                    |                      |     |                  |                                      |    |\n|                    |  Resolves            |     |                  |                                      |    |\n|                    |  *.docker.amaze.io   |     |                  |                                      |    |\n+--------------------+  to IP of Haproxy    |     +------------------+                                      |    |\n                                            |                                                               |    |\n                                            |                                                               |    |\n                                            |                                                               |    |\n                                            |                                                               |    |\n                                            |                                                               |    |\n+--------------------+                      |     +------------------+                                      |    |\n|                    |                      |     |                  |                                      |    |\n| pygmy              +----------------------------&gt;    ssh agent     +--------------------------------------+    |\n|                    |                      |     |                  |                                           |\n+--------------------+  injects ssh-key     |     +------------------+  Exposes ssh-agent via                    |\n                        into agent          |                           /tmp/amazeeio_ssh-agent/socket           |\n                                            |                                                                    |\n                                            +--------------------------------------------------------------------+\n</code></pre>"},{"location":"map_addtitional_ports/","title":"Mapping additional ports","text":"<p>Warning</p> <p>This section is outdated and needs an update</p>"},{"location":"map_addtitional_ports/#map-additional-ports","title":"Map additional ports","text":"<p>As it explained in the Connect to MySQL section, Docker maps MySQL's 3306 port to a random port on docker.amazee.io. This happens because port 3306 is set in the <code>docker-compose.yml</code> file: <pre><code>    ports:\n      - \"3306\"\n</code></pre></p> <p>If you need to map other ports, simply add them to the <code>ports</code> section and restart the container.</p>"},{"location":"map_addtitional_ports/#example-for-solr","title":"Example for Solr","text":"<p>If you use one of Lagoon's Drupal containers with Solr included, your Solr URL most likely looks like this: http://127.0.0.1:8149/solr/drupal/</p> <p>In this case, to play with Solr queries: - add <code>\"8149\"</code> to the <code>ports</code> section of <code>docker-compose.yml</code> file - restart the container with <code>docker-compose stop &amp;&amp; docker-compose up -d</code> - get the port number with <code>docker-compose port drupal 8149</code> - start playing at http://docker.amazee.io:&lt;PORT_NUMBER&gt;/solr/drupal/admin/</p>"},{"location":"ssh_agent/","title":"SSH Agent","text":""},{"location":"ssh_agent/#ssh-agent","title":"SSH Agent","text":"<p>Per default your SSH Key at <code>~/.ssh/id_rsa</code> is added to the Docker containers from <code>pygmy</code></p>"},{"location":"ssh_agent/#how-it-works","title":"How it works","text":"<ol> <li><code>pygmy</code> starts <code>amazeeio/ssh-agent</code> container with a volume <code>/tmp/amazeeio_ssh-agent</code></li> <li><code>pygmy</code> adds a default SSH key from the host into this volume</li> <li><code>docker-compose.yml</code> should have volume inclusion specified for CLI container:   <pre><code>volumes_from:\n  - container:amazeeio-ssh-agent\n</code></pre></li> <li>When CLI container starts, the volume is mounted and an entrypoint script adds SHH key into agent.   @see https://github.com/uselagoon/lagoon-images/blob/main/images/php-cli/entrypoints/10-ssh-agent.sh</li> </ol> <p>Running <code>ssh-add -L</code> within CLI container should show that the SSH key is correctly loaded.</p>"},{"location":"ssh_agent/#troubleshooting","title":"Troubleshooting","text":""},{"location":"ssh_agent/#ssh-key-issues","title":"SSH Key issues","text":"<p>As everything on Lagoon works with key authentication sometimes you might run into issues where the drush aliases aren't displayed or you can't connect to the servers.</p> <pre><code>Could not load API JWT Token, error was: 'lagoon@ssh.lagoon.amazeeio.cloud: Permission denied (publickey).'\n</code></pre> <p>Or for legacy systems:</p> <pre><code> drupal@example.amazee.io:~/public_html/docroot (staging)$ drush @master ssh\n Permission denied (publickey).\n</code></pre> <ol> <li>Check if you see the SSH Key inside your container with <code>ssh-add -L</code>     If you get <code>Could not open a connection to your authentication agent.</code> or <code>The agent has no identities.</code> head straight to step 3.</li> <li>Check if you see your SSH Key in <code>pygmy status</code></li> <li>If you don't see the key in <code>pymgy status</code> run <code>pygmy addkey</code>. You should see <code>Successfully added ssh key</code> if the key addition was successful.</li> <li>After that you need to recreate the containers <code>docker-compose up -d --force</code></li> <li>When the containers are recreated you should be able to see your ssh key with <code>ssh-add -L</code></li> <li>If you still get the <code>Permission denied (publickey)</code> error get in touch with our engineers to check if the key is configured correctly on the hosting side.</li> </ol>"},{"location":"troubleshooting/","title":"Troubleshooting","text":""},{"location":"troubleshooting/#troubleshooting-local-development-environments","title":"Troubleshooting local development environments","text":""},{"location":"troubleshooting/#generic-issues","title":"Generic Issues","text":"<p>For most problems with the Docker Development environment, it's the best to restart all shared and Drupal specific Docker containers.</p>"},{"location":"troubleshooting/#restart-shared-docker-containers","title":"Restart shared Docker containers","text":"<p>This is done either in <code>pygmy</code></p> <pre><code>pygmy restart -d\n</code></pre> <p>now you should also restart the Drupal specific Containers:</p>"},{"location":"troubleshooting/#restart-drupal-containers","title":"Restart Drupal Containers","text":"<p>needs to be done separate for each Drupal container. Run this command where the <code>docker-compose.yml</code> is:</p> <pre><code>docker-compose restart\n</code></pre> <p>sometimes this is not enough, we can tell docker compose to recreate the containers:</p> <pre><code>docker-compose up -d --force-recreate\n</code></pre> <p>If this still is not enough, this is the \ud83d\udd28  method:</p> <pre><code>docker-compose down -v\ndocker-compose up\n</code></pre> <p>Danger</p> <p>This will remove your whole local MySQL database and maybe existing other local created volumes (like the solr search index).</p>"},{"location":"troubleshooting/#drupal-container-logs","title":"Drupal Container logs","text":"<p>The above commands all assume that something is wrong with the containers, sometimes though the issue lies somewhere else. To find such issues, we need to analyze the docker logs, do that via:</p> <pre><code>docker-compose logs\nAttaching to amazee_io.docker.amazee.io\namazee_io.docker.amazee.io | *** Running /etc/my_init.d/00_regen_ssh_host_keys.sh...\namazee_io.docker.amazee.io | *** Running /etc/my_init.d/20_virtual_host_replace.sh...\namazee_io.docker.amazee.io | *** Running /etc/rc.local...\namazee_io.docker.amazee.io | *** Booting runit daemon...\namazee_io.docker.amazee.io | *** Runit started as PID 33\namazee_io.docker.amazee.io | tail: cannot open \u2018/var/log/nginx/10fe-drupal.error.log\u2019 for reading: No such file or directory\namazee_io.docker.amazee.io | tail: cannot open \u2018/var/log/nginx/20be-drupal.error.log\u2019 for reading: No such file or directory\namazee_io.docker.amazee.io | tail: cannot open \u2018/var/log/nginx/error.log\u2019 for reading: No such file or directory\namazee_io.docker.amazee.io | tail: cannot open \u2018/var/log/nginx/ssl-10fe-drupal.error.log\u2019 for reading: No such file or directory\namazee_io.docker.amazee.io | 160502 05:13:44 mysqld_safe Logging to syslog.\namazee_io.docker.amazee.io | child (246) Started\namazee_io.docker.amazee.io | Child (246) said Child starts\n</code></pre> <p>Check the latest few lines of code and you probably see the issue.</p>"},{"location":"troubleshooting/#shared-container-logs","title":"Shared container logs","text":"<p>To see the logs of the shared container started via <code>pygmy</code>, first display all docker containers:</p> <pre><code>docker ps\n\nCONTAINER ID        IMAGE                         COMMAND                  CREATED             STATUS              PORTS                                      NAMES\n9e27b9eadc67        amazeeio/drupal:php70-basic   \"/sbin/my_init\"          5 minutes ago       Up 5 minutes        80/tcp, 443/tcp, 0.0.0.0:32782-&gt;3306/tcp   amazee_io.docker.amazee.io\n5ce655cd369f        andyshinn/dnsmasq:2.75        \"dnsmasq -k -A /docke\"   24 minutes ago      Up 24 minutes       0.0.0.0:53-&gt;53/tcp, 0.0.0.0:53-&gt;53/udp     amazeeio-dnsmasq\n124b3919e89a        amazeeio/ssh-agent            \"/run.sh ssh-agent\"      24 minutes ago      Up 24 minutes                                                  amazeeio-ssh-agent\n93eb7a384640        amazeeio/haproxy              \"/app/docker-entrypoi\"   24 minutes ago      Up 24 minutes       0.0.0.0:80-&gt;80/tcp, 0.0.0.0:443-&gt;443/tcp   amazeeio-haproxy\n</code></pre> <p>You can see three containers that have names with starting <code>amazeeio-</code> these are the shared containers.</p> <p>You can view each container's logs via:</p> <pre><code>docker logs -f [container name]\n</code></pre> <p>Btw, you can also see the logs of the Drupal Containers, via that command.</p>"},{"location":"troubleshooting/#i-get-an-error-like-permission-denied-publickey-and-i-only-see-an-alias-for-none-in-drush-sa","title":"I get an error like <code>Permission denied (publickey).</code> and I only see an alias for <code>@none</code> in <code>drush sa</code>","text":"<p>First try restarting your container, it may have lost the volume mount to the ssh-agent</p> <pre><code>docker-compose up --force -d\n</code></pre> <p>If that does not resolve the issue, restart pygmy</p> <pre><code>pygmy restart -d\n</code></pre>"},{"location":"troubleshooting/#i-get-an-error-like-conflict-the-name-amazee_iodockeramazeeio-is-already-in-use-by-container","title":"I get an error like <code>Conflict. The name \"/amazee_io.docker.amazee.io\" is already in use by container</code>","text":"<p>It happened to all of us, you remove a local <code>docker-compose.yml</code> file, recreate it and now during <code>docker-compose up -d</code>, docker yells at you and tells you this container exists already.</p> <p>The easiest way would be to just give your new container another name, but there are better ways:</p>"},{"location":"troubleshooting/#remove-a-container","title":"Remove a container","text":"<ol> <li> <p>Find the name of the container you would like to completely remove via:</p> <pre><code>docker ps\n\nCONTAINER ID        IMAGE                         COMMAND                  CREATED             STATUS              PORTS                                      NAMES\n9e27b9eadc67        amazeeio/drupal:php70-basic   \"/sbin/my_init\"          10 minutes ago      Up 10 minutes       80/tcp, 443/tcp, 0.0.0.0:32782-&gt;3306/tcp   amazee_io.docker.amazee.io\n</code></pre> </li> <li> <p>Stop the container</p> <pre><code>docker stop amazee_io.docker.amazee.io\n</code></pre> </li> <li> <p>Remove the container with it's volumes:</p> <pre><code>docker rm -v amazee_io.docker.amazee.io\n</code></pre> </li> </ol>"},{"location":"troubleshooting/#remove-all-containers-and-all-volumes","title":"Remove all containers and all volumes","text":"<p>You shouldn't really need to do this, and if you think so, first try the above help. But sometimes the best way is to completely restart:</p> <pre><code>docker rm -vf $(docker ps -q -a)\n</code></pre> <p>This will stop and remove all containers and all attached volumes.</p> <p>Danger</p> <p>This will remove your whole local MySQL database and maybe existing other local created volumes (like the solr search index).</p> <p>If you get an error like <code>cannot create temp file for here-document: No space left on device</code> then you can free up space by removing old volumes and images that we don't need anymore:</p> <pre><code>docker volume rm $(docker volume ls -q)\n</code></pre> <p>If you also want to get rid of all the docker images you can run:</p> <pre><code>docker rmi $(docker images -q)\n</code></pre> <p>Now you have a completely empty Docker, now it's time to start again with <code>pygmy</code>.</p>"},{"location":"troubleshooting/#no-space-left-on-device","title":"No space left on device","text":"<p>If you need to free up some disk space, you can do this:   - start all containers that you need to preserve   - run the following commands     <pre><code>docker system prune\ndocker image prune -a\ndocker volume prune\n</code></pre></p>"},{"location":"troubleshooting/#i-get-an-error-like-port-is-already-allocated-during-start","title":"I get an error like <code>port is already allocated.</code> during start","text":"<p>If during the start of Docker containers you see an error like that:</p> <pre><code>docker: Error response from daemon: driver failed programming external connectivity on endpoint\namazeeio-haproxy (654d1f1c17b0f7304570a763e1017808b214b81648045a5c64ed6a395daeec92):\nBind for 0.0.0.0:443 failed: port is already allocated.\n</code></pre> <p>This means that another service (can be another Docker container, or in case of Linux based systems another service like an installed nginx) is already using this Port.</p> <p>You should stop this service or Docker container first.</p>"},{"location":"troubleshooting/#i-get-an-error-like-service-drupal-mounts-volumes-from-amazeeio-ssh-agent-which-is-not-the-name-of-a-service-or-container","title":"I get an error like <code>Service \"drupal\" mounts volumes from \"amazeeio-ssh-agent\", which is not the name of a service or container.</code>","text":"<p>This can happen when you start a Drupal Container via <code>docker-compose up -d</code> and the pygmy service has stopped</p> <pre><code>docker-compose up -d\nERROR: Service \"drupal\" mounts volumes from \"amazeeio-ssh-agent\", which is not the name of a service or container.\n</code></pre> <p>The Drupal Containers are depending on the <code>ssh-agent</code> shared Docker container (this is in order to have shared ssh-keys) and somehow this container is missing.</p> <p>Try to restart <code>pygmy</code> , this will create the <code>ssh-agent</code> container with the name <code>amazeeio-ssh-agent</code> and then try again.</p>"},{"location":"troubleshooting/#working-offline","title":"Working Offline","text":"<p>Amazeeio uses a remote DNS server to resolve your <code>*.docker.amazee.io</code> addresses which means if you don't have an internet connection you are not going to be able to get to your site. However, you can use your <code>hosts</code> file in this scenario. This file is typically located at <code>/etc/hosts</code> on Linux and macOS and <code>C:\\Windows\\System32\\Drivers\\etc\\host</code> on Windows. You will need administrative privileges to edit this file.</p> <p>If you are unfamiliar with this process, follow this tutorial at How-To Geek.</p>"},{"location":"troubleshooting/#host-entry-if-using-pygmy","title":"Host entry if using pygmy","text":"<pre><code>127.0.0.1 awesomesauce.docker.amazee.io\n</code></pre>"},{"location":"troubleshooting/#i-cant-connect-to-an-app-running-in-docker-from-another-vm-commonly-to-test-in-ie","title":"I can't connect to an app running in docker from another VM (commonly to test in IE)","text":"<p>If you are running the Windows VM in VirtualBox, you can configure it to use the host DNS resolver:</p> <pre><code>VBoxManage modifyvm \"IE11 - Win10\" --natdnshostresolver1 on\n</code></pre> <p>Replace <code>\"IE11 - Win10\"</code> with the name of your VM. This will allow the VM to resolve and connect directly to your <code>http://*.docker.amazee.io</code> services running in pygmy.</p>"},{"location":"troubleshooting/#for-pygmy","title":"For pygmy","text":"<p>An additional step is required if you use pygmy. Domains have to be added to Windows <code>hosts</code> file. They should point to the gateway IP address.</p> <p>To get the gateway IP, run <code>ipconfig</code> in Windows terminal, and search for <code>Default Gateway</code> in the output.</p> <p>Example <code>hosts</code> file contents:</p> <pre><code>10.0.2.2 my-local-website.com.docker.amazee.io\n</code></pre>"},{"location":"troubleshooting/#i-get-an-error-like-no-such-service-amazeeio-ssh-agent-when-using-docker-compose-up-d-even-after-pygmy-started-fine","title":"I get an error like <code>no such service: amazeeio-ssh-agent</code> when using <code>docker-compose up -d</code> even after pygmy started fine","text":"<p>Restart pygmy and make sure that pygmy could start the ssh-agent container.</p> <pre><code>pygmy restart\npygmy status\n</code></pre> <p>You could see a message like this:</p> <pre><code>[*] ssh-agent: Running as docker container amazeeio-ssh-agent, loaded keys:\n</code></pre>"},{"location":"troubleshooting/#docker-desktop-users","title":"Docker Desktop users","text":"<p>If you have recently updated Docker Desktop you should ensure that your turn off Docker Compose v2 support.</p> <ol> <li>Open Docker Desktop Preferences</li> <li>Uncheck the option labelled \"Use Docker Compose v2\"</li> <li>Click Apply and Restart</li> </ol> <p>Once completed, try starting pygmy and run your <code>docker-compose up -d</code> commands again.</p> <pre><code>pygmy up\ndocker-compose up -d\n</code></pre>"},{"location":"troubleshooting/#pygmy","title":"pygmy","text":"<p>Most issues with <code>pygmy</code> can be resolved with:</p> <p></p> <pre><code>pygmy restart -d\n</code></pre> <p>If that does not help, try and restart other services, in this order:</p> <ol> <li>Docker</li> <li>Reboot your computer</li> </ol>"},{"location":"troubleshooting/#i-get-an-error-like-listen-tcp-000053-bind-address-already-in-use-during-pygmy-up","title":"I get an error like <code>listen tcp 0.0.0.0:53: bind: address already in use</code> during <code>pygmy up</code>","text":"<p>If during starting of <code>pygmy</code> you see an error like that:</p> <pre><code>    Error response from daemon: driver failed programming external connectivity on endpoint amazeeio-dnsmasq:\n    Error starting userland proxy: listen tcp 0.0.0.0:53: bind: address already in use\n    Error: failed to start containers: amazeeio-dnsmasq\n</code></pre> <p>You are probably on Ubuntu and the by default started DNS server by Ubuntu conflicts with the one we provide with <code>pygmy</code>. The resolution depends on Ubuntu version.</p>"},{"location":"troubleshooting/#ubuntu-before-1804","title":"Ubuntu before 18.04","text":"<p>You should disable it, see here: http://askubuntu.com/a/233223 (no worries, the default started DNS server is actually not used, so it's safe to disable it).</p>"},{"location":"troubleshooting/#ubuntu-1804-and-later","title":"Ubuntu 18.04 and later","text":"<p>You should disable it as described https://mmoapi.com/post/how-to-disable-dnsmasq-port-53-listening-on-ubuntu-18-04. Instead of reboot the system, remove /etc/resolv.conf  file (still symlinking to a systemd-resolved file) and create an empty one.</p> <pre><code>sudo rm /etc/resolv.conf\nsudo touch /etc/resolv.conf\n</code></pre> <p>If you still run into the error run following command <code>sudo netstat -tulpn</code> to see the processlist look for the service running on port 53 (you should find that process in the <code>Local Address</code> column). Look for the Process ID (PID)</p> <p>With the Process ID you can now run following command:</p> <p>sudo kill [Process ID]</p>"},{"location":"update/","title":"Update","text":""},{"location":"update/#update-pygmy","title":"Update pygmy","text":"<p>As <code>pygmy</code> is an active project, you should also take care of updating pygmy.</p> <p>Use the same instructions to update Pygmy as to install it. </p>"},{"location":"update/#i-see-errors-or-unexpected-behaviour-after-the-upgrade","title":"I see errors or unexpected behaviour after the upgrade","text":"<p>If you see anything unexpected after upgrading, the recommended advice is to clean up the environment and remove the docker network.</p> <p>Any applications which use the network <code>amazeeio-network</code> such as a docker-compose Drupal project - should not be running. You can alternatively run <code>docker network rm amazeeio-network --force</code>.</p> <pre><code>$ pygmy clean\n$ docker network rm amazeeio-network\n</code></pre>"},{"location":"update/#update-docker-containers-with-pygmy","title":"Update Docker Containers with <code>pygmy</code>","text":"<p><code>pygmy</code> can update shared docker containers for you:</p> <pre><code>pygmy update &amp;&amp; pygmy restart\n</code></pre>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#start","title":"Start","text":"<p>To start <code>pygmy</code> run following command</p> <pre><code>pygmy up\n</code></pre> <p><code>pygmy</code> will now start all the required Docker containers and add the ssh key.</p> <p>If you are on Ubuntu you might need to run pygmy with <code>pygmy up --no-resolver</code></p> <p>All done? Head over to Drupal Docker Containers to learn how to work with docker containers.</p>"},{"location":"usage/#command-line-usage","title":"Command line usage","text":"<pre><code>Amazeeio's local development tool,\n\nRuns DNSMasq, HAProxy, MailHog and an SSH Agent in local containers for local development.\n\nUsage:\n  pygmy [command]\n\nAvailable Commands:\n  addkey      Add/re-add an SSH key to the agent\n  clean       Stop and remove all pygmy services regardless of state\n  down        Stop and remove all pygmy services\n  export      Export validated configuration to a given path\n  help        Help about any command\n  restart     Restart all pygmy containers.\n  status      Report status of the pygmy services\n  up          Bring up pygmy services (dnsmasq, haproxy, mailhog, resolv, ssh-agent)\n  update      Pulls Docker Images and recreates the Containers\n  version     # Check current installed version of pygmy\n\nFlags:\n      --config string   config file (default is $HOME/.pygmy.yml)\n  -h, --help            help for pygmy\n  -t, --toggle          Help message for toggle\n\nUse \"pygmy [command] --help\" for more information about a command.\n</code></pre>"},{"location":"usage/#adding-ssh-keys","title":"Adding ssh keys","text":"<p>Call the <code>addkey</code> command with the absolute path to the key you would like to add. In case this they is passphrase protected, it will ask for your passphrase.</p> <pre><code>pygmy addkey /Users/amazeeio/.ssh/my_other_key\n\nEnter passphrase for /Users/amazeeio/.ssh/my_other_key:\nIdentity added: /Users/amazeeio/.ssh/my_other_key (/Users/amazeeio/.ssh/my_other_key)\n</code></pre>"},{"location":"usage/#checking-the-status","title":"Checking the status","text":"<p>Run <code>pygmy status</code> and <code>pygmy</code> will tell you how it feels right now and which ssh-keys it currently has in it's stomach:</p> <pre><code>pygmy status\n\n[*] amazeeio-ssh-agent: Running as container amazeeio-ssh-agent\n[*] mailhog.docker.amazee.io: Running as container mailhog.docker.amazee.io\n[*] amazeeio-haproxy: Running as container amazeeio-haproxy\n[*] amazeeio-dnsmasq: Running as container amazeeio-dnsmasq\n[*] amazeeio-haproxy is connected to network amazeeio-network\n[*] Resolv MacOS Resolver is properly connected\n\ufffdssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDNxWpKZcU/D+t7ToRGPNEXbvojrFtxKH99ZuaOJ7cs9KurVJyiEHyBEUZAPt0j9SO5yzdVEM//rVoZIwZeypW9C7CYgTpRoA/k1BnE1xvtoQT+528GmjQG542NBFo2KdO+LWqx19kClvoN7haGDtYKbS6MWUYEwD0ey69cquFDKC+A5NKx3z065gn9UZqLIeXjHCJ+v5PCSWXL3CFn57UlN824j1OFAECrjfNNfFEVmDJqa2Da6o9DhN+W1wyZJCklRPCiRlK5m3p9x1ClPKALUGQ0hvpjz36QSsXqS88MJPHsZvsv2PuW6xXNW8PSBCHcK6no5lYV/4hk8jcDQd2P6dpwvDiti+bTcfDH3jrVNqFati7ku37xIc3jWGn7CkCpMy008ai4kFMq2W2w6gOy0HncQ7z8AE8BdndxyEFYCLJviWOjW1SjSesPJpc9dxgmSmp/2qa6u0UZzFFHxJklIHepJAvcoHghs5Te2oMHwriRdpKqXiW+eJyudWCOzEeJljr73/Caft+CgZ7+kmmiy0hlqVAD6xkyBsuEF8+MdONfBHarpY8qZdLehavGd0DJW36nDnPvefDxoidJ0qYtjF8ElpNkeguAnsUFEwHkoc3Ur/NDcrkdGTKS8wb5AtkdwbDOCQTR00ABfAcYUFwOAvXodoQLrvm2ibp5l7/Y/Q== user@localhost\n - http://mailhog.docker.amazee.io (mailhog.docker.amazee.io)\n - http://docker.amazee.io/stats (amazeeio-haproxy)\n</code></pre>"},{"location":"usage/#pygmy-down-vs-pygmy-clean","title":"<code>pygmy down</code> vs <code>pygmy clean</code>","text":"<p><code>pygmy</code> behaves like Docker, it's a whale in the end!</p> <p>During regular development <code>pygmy stop</code> is perfectly fine, it will remove the Docker containers still alive.</p> <p>If you like to cleanup though, use <code>pygmy clean</code> to kill and remove all of the Docker containers, even if they're not alive.</p>"},{"location":"usage/#access-haproxy-statistic-page-and-logs","title":"Access HAProxy statistic page and logs","text":"<p>HAProxy service has statistics web page already enabled. To access the page, just point the browser to http://docker.amazee.io/stats.  </p> <p>To watch at haproxy container logs, use the <code>docker logs amazeeio-haproxy</code> command with standard <code>docker logs</code> options like <code>-f</code> to follow.</p>"},{"location":"customisation/introduction/","title":"Examples of Pygmy customisation","text":""},{"location":"customisation/introduction/#introduction","title":"Introduction","text":"<p>The following are examples of how somebody can utilise pygmy to customise their environment using a <code>~/.pygmy.yml</code> file. This file will have a schema which can be imported and the services match the Docker API.</p> <p>Standard schema for <code>~/.pygmy.yml</code> <pre><code># Defaults is a boolean which indicates all default settings should be inherited.\ndefaults: true\n\n# Resolvers is the Resolv configuration, you can disable this by setting it to [].\nresolvers:\n  - Data:   \"Contents of the resolvr file/section\"\n    File:   \"filename.conf\"\n    Folder: \"/folderpath\"\n    Name:   \"Human-readable name\"\n\n# Services is a hashmap of \nservices:\n\n  # The hashmap entry denotes the service name - such as \"amazeeio-dnsmasq\".\n  mycontainer:\n\n    # Config is derrived from the Docker API, intended for container configuration.\n    # See https://godoc.org/github.com/docker/docker/api/types/container#Config for the full spec.\n    Config:\n\n      # This field is MANDATORY as the value will by default be empty.\n      Image: imagename\n\n      # Labels is a key/value pair of labels which will evaluate to string\n      # equivelants. For example, Booleans can evaluate to 0/1 or true/false\n      # string values depending on the Docker runtime you're using.\n      Labels:\n\n        # To enable Pygmy to the configuration, you will need this label.\n        # This field is MANDATORY as the value will by default be false.\n        pygmy.enable: true\n\n        # You need to give this container a name\n        # This field is MANDATORY as the value will by default be empty.\n        pygmy.name: mycontainer\n\n        # If you are customising an existing service, you can optionally\n        # inherit the defaults if the global defaults are disabled.\n        # Setting this value on a non-standard service will do nothing.\n        pygmy.defaults: true\n\n        # To display the output when the container starts:\n        pygmy.output: true\n\n        # To hide the container from the status messages:\n        pygmy.discrete: true\n\n        # To test an endpoint:\n        pygmy.url: http://mycontainer.docker.amazee.io\n\n        # To identify the purpose of a container - this is rather specialised so please ignore.\n        pygmy.purpose: sshagent\n\n        # To set a weight between 10 and 99 to control the order containers are started:\n        pygmy.weight: 50\n\n    # HostConfig is derived from the Docker API, intended for host configuration.\n    # See https://godoc.org/github.com/docker/docker/api/types/container#HostConfig for the full spec.\n    HostConfig: []\n\n    # NetworkConfig is derived from the Docker API, intended for network configuration.\n    # See https://godoc.org/github.com/docker/docker/api/types/network#NetworkingConfig for the full spec.\n    NetworkConfig:\n\n      # Hashmap value ideally should be the network name - but could be anything.\n      # Results may vary, so try what works.\n      amazeeio-network:\n\n        # Every network needs a name.\n        Name: amazeeio-network\n\n        # An array of Containers.\n        Containers:\n\n          # Container name will tell Pygmy to integrate the container of the specified name should be connected to the docker network.\n          Name: amazeeio-haproxy\n\n        Labels:\n\n          # Mandatory for network creation/usage via Pygmy.\n          pygmy.network: true\n\n# networks is a hashmap of the API for a NetworkResource.\n# See https://godoc.org/github.com/docker/docker/api/types#NetworkResource for the full spec.\nnetworks: []\n\n# volumes is a hashmap of the API for Volumes\n# See https://godoc.org/github.com/docker/docker/api/types#Volume for the full spec.\nvolumes: []\n\n# keys is all of the SSH key paths which you're utilising.\nkeys:\n  - /home/user1/.ssh/id_rsa\n  - /home/user2/.ssh/id_rsa\n</code></pre></p>"},{"location":"customisation/introduction/#applied-examples","title":"Applied examples","text":"<p>A suite of examples with a specific purpose are on the way. </p>"}]}